import React, { useState, useRef, useEffect } from "react";

const SocialNITTChatbot = () => {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([
    { 
      from: "bot", 
      text: "üëã Hi! I'm your SocialNITT assistant. I can help you with questions about our platform. Use the menu below or ask me anything!" 
    }
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const panelRef = useRef(null);
  const chatbotRef = useRef(null);

  // Comprehensive FAQ Knowledge Base
  const faqDatabase = {
    // Products
    'product': {
      keywords: ['product', 'buy', 'sell', 'marketplace', 'item', 'listing', 'shop'],
      responses: [
        "üõçÔ∏è **Products on SocialNITT:**\n\n‚Ä¢ Browse products in the marketplace\n‚Ä¢ Create product listings to sell items\n‚Ä¢ Contact sellers via WhatsApp\n‚Ä¢ Filter by category and price\n‚Ä¢ View detailed product information\n‚Ä¢ Safe transactions between students\n\n*Need help with a specific product feature?*"
      ]
    },
    'create_product': {
      keywords: ['create product', 'add product', 'sell product', 'list product', 'post product', 'sell item'],
      responses: [
        "üìù **Creating a Product Listing:**\n\n1. Go to Products ‚Üí Create Product\n2. Add product title and description\n3. Set your price and category\n4. Upload clear photos (multiple angles)\n5. Add your contact details\n6. Submit for review\n\n*Tips: Use good lighting for photos and be honest about condition!*"
      ]
    },
    'edit_product': {
      keywords: ['edit product', 'update product', 'modify product', 'change product', 'delete product'],
      responses: [
        "‚úèÔ∏è **Managing Your Products:**\n\n‚Ä¢ **Edit:** Go to your dashboard ‚Üí Select product ‚Üí Edit\n‚Ä¢ **Delete:** Remove listings when sold\n‚Ä¢ **Update Price:** Modify pricing anytime\n‚Ä¢ **Mark as Sold:** Update status when sold\n‚Ä¢ **Reactivate:** Republish if needed\n\n*Keep your listings current for better responses!*"
      ]
    },
    'product_issues': {
      keywords: ['product not showing', 'cant see product', 'product disappeared', 'listing missing', 'product error'],
      responses: [
        "üîç **Product Display Issues:**\n\n‚Ä¢ **Not Visible:** Check if it's under review\n‚Ä¢ **Missing Photos:** Re-upload images in JPG/PNG format\n‚Ä¢ **Category Error:** Ensure correct category selection\n‚Ä¢ **Refresh:** Try logging out and back in\n‚Ä¢ **Contact Admin:** For persistent issues\n\n*Most issues resolve within 24 hours of posting.*"
      ]
    },

    // Services
    'service': {
      keywords: ['service', 'help', 'assistance', 'offer service', 'request service', 'skill'],
      responses: [
        "üîß **Services on SocialNITT:**\n\n‚Ä¢ Offer your skills to other students\n‚Ä¢ Request services you need\n‚Ä¢ Set your budget and urgency level\n‚Ä¢ Categories: Academic, Technical, Personal, Creative\n‚Ä¢ Direct WhatsApp contact with providers\n‚Ä¢ Build your reputation through reviews\n\n*What kind of service are you looking for?*"
      ]
    },
    'create_service': {
      keywords: ['create service', 'offer service', 'add service', 'post service', 'provide service'],
      responses: [
        "üíº **Creating a Service Listing:**\n\n1. Navigate to Services ‚Üí Create Service\n2. Choose type (Offering/Requesting)\n3. Select category and set budget\n4. Set urgency level (Low/Medium/High)\n5. Add detailed description with examples\n6. Include your location and availability\n7. Submit with contact info\n\n*Detailed descriptions get more responses!*"
      ]
    },
    'service_types': {
      keywords: ['types of services', 'service categories', 'what services', 'available services'],
      responses: [
        "üìã **Popular Service Categories:**\n\n**Academic:**\n‚Ä¢ Assignment help, tutoring, project guidance\n‚Ä¢ Research assistance, presentation prep\n\n**Technical:**\n‚Ä¢ Web development, app creation, coding help\n‚Ä¢ IT support, software installation\n\n**Personal:**\n‚Ä¢ Event planning, photography, content creation\n‚Ä¢ Transportation, moving help, shopping\n\n**Creative:**\n‚Ä¢ Graphic design, video editing, writing\n‚Ä¢ Music lessons, art commissions"
      ]
    },
    'service_pricing': {
      keywords: ['service price', 'how much charge', 'service cost', 'pricing service', 'service rate'],
      responses: [
        "üí∞ **Service Pricing Guidelines:**\n\n**Academic Services:** ‚Çπ50-500/hour\n‚Ä¢ Basic tutoring: ‚Çπ50-150/hour\n‚Ä¢ Assignment help: ‚Çπ100-300/project\n‚Ä¢ Research work: ‚Çπ200-500/project\n\n**Technical Services:** ‚Çπ100-1000/project\n‚Ä¢ Simple websites: ‚Çπ500-2000\n‚Ä¢ App development: ‚Çπ1000-5000\n‚Ä¢ IT troubleshooting: ‚Çπ100-300\n\n*Prices vary by complexity and urgency!*"
      ]
    },

    // Food
    'food': {
      keywords: ['food', 'meal', 'restaurant', 'delivery', 'order', 'eat', 'hungry', 'canteen'],
      responses: [
        "üçï **Food on SocialNITT:**\n\n‚Ä¢ Discover local food options near campus\n‚Ä¢ Share food recommendations and reviews\n‚Ä¢ Find group orders for discounts\n‚Ä¢ Rate restaurants and dishes\n‚Ä¢ Connect with fellow food enthusiasts\n‚Ä¢ Get delivery updates and timings\n\n*Hungry? Let's find you something delicious!*"
      ]
    },
    'create_food': {
      keywords: ['create food', 'add food', 'food listing', 'recommend food', 'add restaurant'],
      responses: [
        "üçΩÔ∏è **Adding Food Listings:**\n\n1. Go to Food ‚Üí Create Food\n2. Add restaurant/food item name\n3. Include description and price range\n4. Upload appetizing photos\n5. Add location and contact details\n6. Set category and cuisine type\n7. Add operating hours and delivery info\n\n*High-quality photos get more attention!*"
      ]
    },
    'food_delivery': {
      keywords: ['food delivery', 'order food', 'delivery time', 'food ordering', 'home delivery'],
      responses: [
        "üöö **Food Delivery Info:**\n\n**Popular Delivery Apps:**\n‚Ä¢ Zomato, Swiggy, Uber Eats\n‚Ä¢ Direct restaurant contact\n\n**Campus Area Delivery:**\n‚Ä¢ Most restaurants deliver to hostels\n‚Ä¢ Typical delivery time: 30-45 minutes\n‚Ä¢ Group orders often get discounts\n‚Ä¢ Check for student offers and coupons\n\n*Many restaurants offer student discounts!*"
      ]
    },
    'campus_food': {
      keywords: ['campus food', 'hostel mess', 'canteen', 'mess food', 'campus restaurant'],
      responses: [
        "üè´ **Campus Food Options:**\n\n**Hostel Mess:**\n‚Ä¢ Fixed meal timings\n‚Ä¢ Monthly mess bills\n‚Ä¢ Special occasion meals\n\n**Campus Canteens:**\n‚Ä¢ Affordable student pricing\n‚Ä¢ Quick snacks and meals\n‚Ä¢ Extended hours during exams\n\n**Nearby Restaurants:**\n‚Ä¢ Student-friendly pricing\n‚Ä¢ Late-night options available\n‚Ä¢ Group study meal deals"
      ]
    },

    // Technical Issues
    'technical_issues': {
      keywords: ['not working', 'error', 'bug', 'crash', 'slow', 'loading', 'broken', 'technical problem'],
      responses: [
        "üîß **Technical Troubleshooting:**\n\n**Common Fixes:**\n‚Ä¢ Clear browser cache and cookies\n‚Ä¢ Disable ad blockers temporarily\n‚Ä¢ Try incognito/private browsing\n‚Ä¢ Check internet connection\n‚Ä¢ Update your browser\n‚Ä¢ Restart the app/refresh page\n\n**Still Having Issues?**\n‚Ä¢ Take a screenshot of the error\n‚Ä¢ Note what you were doing when it happened\n‚Ä¢ Contact support with details"
      ]
    },
    'upload_issues': {
      keywords: ['upload error', 'image not uploading', 'photo problem', 'file upload', 'picture error'],
      responses: [
        "üì∏ **Upload Troubleshooting:**\n\n**Image Requirements:**\n‚Ä¢ Formats: JPG, PNG, JPEG only\n‚Ä¢ Max size: 5MB per image\n‚Ä¢ Recommended: 1024x1024 pixels\n‚Ä¢ Clear, well-lit photos\n\n**Upload Problems:**\n‚Ä¢ Check file size and format\n‚Ä¢ Ensure stable internet connection\n‚Ä¢ Try uploading one image at a time\n‚Ä¢ Compress large images before upload\n‚Ä¢ Clear browser cache if persistent"
      ]
    },

    // Account & Authentication
    'account': {
      keywords: ['account', 'profile', 'login', 'register', 'password', 'settings', 'sign up'],
      responses: [
        "üë§ **Account Management:**\n\n‚Ä¢ **Login Issues:** Check email/password carefully\n‚Ä¢ **Registration:** Use your NIT Trichy email only\n‚Ä¢ **Profile:** Update info and add profile picture\n‚Ä¢ **Password:** Use 'Forgot Password' for reset\n‚Ä¢ **Settings:** Manage notifications and privacy\n‚Ä¢ **Verification:** Check email for verification links\n\n*Having trouble accessing your account?*"
      ]
    },
    'password_reset': {
      keywords: ['forgot password', 'reset password', 'password reset', 'cant login', 'password problem'],
      responses: [
        "üîê **Password Reset Steps:**\n\n1. Go to login page\n2. Click 'Forgot Password'\n3. Enter your registered email\n4. Check email for reset link\n5. Click the link in email\n6. Create a new strong password\n7. Login with new password\n\n**Password Tips:**\n‚Ä¢ Use 8+ characters\n‚Ä¢ Include numbers and symbols\n‚Ä¢ Don't reuse old passwords\n\n*Check spam folder if email doesn't arrive!*"
      ]
    },
    'verification': {
      keywords: ['email verification', 'verify account', 'verification email', 'activate account'],
      responses: [
        "‚úÖ **Account Verification:**\n\n**Steps to Verify:**\n1. Check your NIT Trichy email\n2. Look for verification email from SocialNITT\n3. Click the verification link\n4. Your account will be activated\n\n**Email Not Received?**\n‚Ä¢ Check spam/junk folder\n‚Ä¢ Ensure you used correct NIT email\n‚Ä¢ Request new verification email\n‚Ä¢ Contact support if still missing\n\n*Only verified accounts can post listings!*"
      ]
    },
    'profile_setup': {
      keywords: ['profile setup', 'complete profile', 'profile picture', 'profile info', 'edit profile'],
      responses: [
        "üìã **Setting Up Your Profile:**\n\n**Essential Information:**\n‚Ä¢ Profile picture (clear, professional)\n‚Ä¢ Full name and year of study\n‚Ä¢ Branch/Department\n‚Ä¢ Hostel/Location details\n‚Ä¢ Contact preferences\n‚Ä¢ Bio/Introduction (optional)\n\n**Privacy Settings:**\n‚Ä¢ Control who can contact you\n‚Ä¢ Manage notification preferences\n‚Ä¢ Set visibility of personal info\n\n*Complete profiles get more responses!*"
      ]
    },

    // Safety & Security
    'safety': {
      keywords: ['safety', 'secure', 'scam', 'fraud', 'suspicious', 'report user', 'block user'],
      responses: [
        "üõ°Ô∏è **Safety Guidelines:**\n\n**Stay Safe:**\n‚Ä¢ Meet in public places on campus\n‚Ä¢ Verify seller identity before payment\n‚Ä¢ Use campus locations for exchanges\n‚Ä¢ Trust your instincts about people\n‚Ä¢ Don't share personal financial info\n\n**Report Issues:**\n‚Ä¢ Suspicious listings or users\n‚Ä¢ Inappropriate behavior\n‚Ä¢ Scam attempts\n‚Ä¢ Fake products/services\n\n*Your safety is our priority!*"
      ]
    },
    'payment_safety': {
      keywords: ['payment', 'money', 'transaction', 'pay', 'payment safety', 'how to pay'],
      responses: [
        "üí≥ **Payment Safety Tips:**\n\n**Safe Payment Methods:**\n‚Ä¢ Cash on delivery/pickup\n‚Ä¢ UPI after inspection\n‚Ä¢ Bank transfer for verified sellers\n‚Ä¢ Avoid advance payments to strangers\n\n**Red Flags:**\n‚Ä¢ Requests for advance payment\n‚Ä¢ Deals that seem too good to be true\n‚Ä¢ Pressure to pay immediately\n‚Ä¢ Reluctance to meet in person\n\n**Best Practice:** Pay only after seeing and verifying the product!"
      ]
    },
    'report_user': {
      keywords: ['report', 'block', 'spam', 'inappropriate', 'abuse', 'harassment'],
      responses: [
        "üö® **Reporting Users/Content:**\n\n**How to Report:**\n‚Ä¢ Click on user's profile\n‚Ä¢ Select 'Report User'\n‚Ä¢ Choose reason for reporting\n‚Ä¢ Provide additional details\n‚Ä¢ Submit report\n\n**Report Reasons:**\n‚Ä¢ Fake listings\n‚Ä¢ Inappropriate behavior\n‚Ä¢ Spam or scam attempts\n‚Ä¢ Harassment\n‚Ä¢ Terms violation\n\n*All reports are reviewed within 24 hours.*"
      ]
    },

    // General Platform Help
    'contact': {
      keywords: ['contact', 'support', 'help', 'issue', 'problem', 'customer service', 'admin'],
      responses: [
        "üìû **Getting Help:**\n\n**Contact Methods:**\n‚Ä¢ **Chat:** Use this chatbot for instant help\n‚Ä¢ **Email:** support@socialnitt.com\n‚Ä¢ **WhatsApp:** Contact sellers directly\n‚Ä¢ **Report:** Use in-app reporting for issues\n\n**Response Times:**\n‚Ä¢ Chatbot: Instant\n‚Ä¢ Email support: 24-48 hours\n‚Ä¢ Reports: Within 24 hours\n\n*I'm here to help with any questions!*"
      ]
    },
    'navigation': {
      keywords: ['navigate', 'menu', 'where', 'how to find', 'dashboard', 'how to use'],
      responses: [
        "üß≠ **Platform Navigation:**\n\n**Main Sections:**\n‚Ä¢ **Home:** Latest listings and updates\n‚Ä¢ **Products:** Buy/sell marketplace\n‚Ä¢ **Services:** Skill exchange platform\n‚Ä¢ **Food:** Restaurant recommendations\n‚Ä¢ **Profile:** Your account and listings\n\n**Quick Actions:**\n‚Ä¢ Search bar for specific items\n‚Ä¢ Filter by category/price\n‚Ä¢ Sort by date/popularity\n‚Ä¢ Save favorites for later\n\n*Use the search function to find specific items quickly!*"
      ]
    },
    'rules': {
      keywords: ['rules', 'guidelines', 'policy', 'terms', 'allowed', 'prohibited', 'community guidelines'],
      responses: [
        "üìã **Community Guidelines:**\n\n**Basic Rules:**\n‚Ä¢ Only NIT Trichy students can join\n‚Ä¢ Be respectful and honest always\n‚Ä¢ No spam or irrelevant content\n‚Ä¢ Accurate descriptions and fair pricing\n‚Ä¢ No offensive or inappropriate content\n\n**Prohibited:**\n‚Ä¢ Fake accounts or listings\n‚Ä¢ Harassment or bullying\n‚Ä¢ Adult content\n‚Ä¢ Illegal items or services\n‚Ä¢ Misleading information\n\n*Violations may result in account suspension!*"
      ]
    },
    'features': {
      keywords: ['features', 'what can i do', 'platform features', 'functionality', 'capabilities'],
      responses: [
        "‚≠ê **SocialNITT Features:**\n\n**Marketplace:**\n‚Ä¢ Buy and sell products\n‚Ä¢ Service exchange platform\n‚Ä¢ Food recommendations\n‚Ä¢ Direct messaging via WhatsApp\n\n**Social Features:**\n‚Ä¢ Student community network\n‚Ä¢ Reviews and ratings\n‚Ä¢ Follow favorite sellers\n‚Ä¢ Group orders and collaborations\n\n**Smart Features:**\n‚Ä¢ Advanced search and filters\n‚Ä¢ Price comparison\n‚Ä¢ Location-based listings\n‚Ä¢ Notification system"
      ]
    },
    'getting_started': {
      keywords: ['getting started', 'how to start', 'new user', 'first time', 'tutorial', 'guide'],
      responses: [
        "üöÄ **Getting Started Guide:**\n\n**For New Users:**\n1. Verify your NIT Trichy email\n2. Complete your profile setup\n3. Browse existing listings\n4. Understand community guidelines\n5. Start with small transactions\n\n**First Steps:**\n‚Ä¢ Explore different categories\n‚Ä¢ Follow active users\n‚Ä¢ Join relevant groups\n‚Ä¢ Ask questions in this chat\n‚Ä¢ Start building your reputation\n\n*Welcome to the SocialNITT community!*"
      ]
    },
    'notifications': {
      keywords: ['notifications', 'alerts', 'notify', 'notification settings', 'push notifications'],
      responses: [
        "üîî **Notification Settings:**\n\n**Types of Notifications:**\n‚Ä¢ New messages from buyers/sellers\n‚Ä¢ Price drops on saved items\n‚Ä¢ New listings in your categories\n‚Ä¢ Service request responses\n‚Ä¢ Account security alerts\n\n**Manage Notifications:**\n‚Ä¢ Go to Profile ‚Üí Settings\n‚Ä¢ Choose notification preferences\n‚Ä¢ Set quiet hours\n‚Ä¢ Enable/disable specific types\n‚Ä¢ Email vs push notification options\n\n*Customize to avoid spam while staying informed!*"
      ]
    },
    'search_tips': {
      keywords: ['search', 'find', 'filter', 'search tips', 'how to search', 'search better'],
      responses: [
        "üîç **Search Tips & Tricks:**\n\n**Better Search Results:**\n‚Ä¢ Use specific keywords (e.g., 'iPhone 13' not just 'phone')\n‚Ä¢ Try different word combinations\n‚Ä¢ Use filters for price range, category\n‚Ä¢ Sort by newest or price\n‚Ä¢ Check spelling carefully\n\n**Advanced Filters:**\n‚Ä¢ Location within campus\n‚Ä¢ Price range selection\n‚Ä¢ Condition (new/used)\n‚Ä¢ Posted date range\n‚Ä¢ User ratings\n\n*Specific searches give better results!*"
      ]
    }
  };

  // Quick FAQ Menu - 3 rows of common questions
  const quickFAQMenu = [
    // Row 1 - Account & Setup
    [
      { text: "üîê Reset Password", query: "How to reset password?" },
      { text: "‚úÖ Verify Email", query: "Email verification not working" },
      { text: "üë§ Profile Setup", query: "Complete profile setup" }
    ],
    // Row 2 - Main Features  
    [
      { text: "üõçÔ∏è Sell Products", query: "How to create a product listing?" },
      { text: "üíº Offer Service", query: "How to offer a service?" },
      { text: "üçï Add Restaurant", query: "How to add restaurant recommendation?" }
    ],
    // Row 3 - Help & Safety
    [
      { text: "üõ°Ô∏è Safety Tips", query: "Payment safety tips" },
      { text: "üîß Upload Issues", query: "Upload troubleshooting" },
      { text: "üìã Getting Started", query: "Getting started guide" }
    ]
  ];

  const quickSuggestions = [
    "How to sell products?",
    "Create service listing",
    "Find food options",
    "Account verification"
  ];

  useEffect(() => {
    if (open && panelRef.current) {
      panelRef.current.scrollTop = panelRef.current.scrollHeight;
    }
  }, [messages, open]);

  useEffect(() => {
    function handleClickOutside(event) {
      if (
        chatbotRef.current &&
        !chatbotRef.current.contains(event.target) &&
        open
      ) {
        setOpen(false);
      }
    }
    if (open) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [open]);

  const findBestMatch = (userInput) => {
    const input = userInput.toLowerCase();
    let bestMatch = null;
    let maxScore = 0;

    Object.entries(faqDatabase).forEach(([key, data]) => {
      const score = data.keywords.reduce((acc, keyword) => {
        if (input.includes(keyword)) {
          return acc + keyword.length;
        }
        return acc;
      }, 0);

      if (score > maxScore) {
        maxScore = score;
        bestMatch = data;
      }
    });

    return bestMatch;
  };

  const sendMessage = async (messageText = null) => {
    const userMessage = messageText || input.trim();
    if (!userMessage) return;

    setMessages((msgs) => [...msgs, { from: "user", text: userMessage }]);
    setLoading(true);
    setInput("");

    // Simulate processing time
    await new Promise(resolve => setTimeout(resolve, 1000));

    const match = findBestMatch(userMessage);
    
    let response;
    if (match) {
      response = match.responses[0];
    } else {
      // Enhanced fallback responses for unmatched queries
      const fallbackResponses = [
        "ü§î I'm not sure about that specific question, but I can help you with:\n\n‚Ä¢ **Products** - Buying, selling, and marketplace issues\n‚Ä¢ **Services** - Offering skills or requesting help\n‚Ä¢ **Food** - Restaurant recommendations and delivery\n‚Ä¢ **Account** - Login, verification, and profile setup\n‚Ä¢ **Safety** - Payment security and reporting users\n‚Ä¢ **Technical** - Upload issues and troubleshooting\n\nCould you try asking about one of these topics?",
        
        "üí° I'd love to help! Here are some popular questions I can answer:\n\n‚Ä¢ How to create and manage listings\n‚Ä¢ Platform navigation and features\n‚Ä¢ Account verification and password reset\n‚Ä¢ Safety guidelines and payment tips\n‚Ä¢ Technical troubleshooting\n‚Ä¢ Community rules and guidelines\n\nWhat would you like to know more about?",
        
        "üì± SocialNITT connects NIT Trichy students for buying, selling, and helping each other. I can guide you through:\n\n‚Ä¢ **Marketplace Features** - Products and services\n‚Ä¢ **Getting Started** - Account setup and verification\n‚Ä¢ **Safety Tips** - Secure transactions and reporting\n‚Ä¢ **Technical Help** - Upload issues and bugs\n‚Ä¢ **Platform Rules** - Community guidelines\n\nWhat specific area can I help you with?",
        
        "üéì As your SocialNITT assistant, I'm here to help with any platform-related questions! Try asking about:\n\n‚Ä¢ **\"How to sell products\"** - Step-by-step selling guide\n‚Ä¢ **\"Payment safety\"** - Secure transaction tips\n‚Ä¢ **\"Upload issues\"** - Photo and listing problems\n‚Ä¢ **\"Account verification\"** - Email verification help\n‚Ä¢ **\"Report user\"** - Safety and reporting features\n\nOr just describe what you're trying to do!"
      ];
      response = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
    }

    setMessages((msgs) => [...msgs, { from: "bot", text: response }]);
    setLoading(false);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    sendMessage();
  };

  const handleSuggestionClick = (suggestion) => {
    sendMessage(suggestion);
  };

  const handleFAQClick = (faqItem) => {
    sendMessage(faqItem.query);
  };

  return (
    <>
      {/* Floating Chatbot Button */}
      <div
        style={{
          position: "fixed",
          bottom: "32px",
          right: "32px",
          zIndex: 9999
        }}
      >
        <button
          onClick={() => setOpen((o) => !o)}
          style={{
            background: "linear-gradient(135deg, #850E35, #a91142)",
            color: "#fff",
            border: "none",
            borderRadius: "50%",
            width: "60px",
            height: "60px",
            fontSize: "1.5rem",
            boxShadow: "0 4px 16px rgba(133, 14, 53, 0.3)",
            cursor: "pointer",
            transition: "all 0.3s ease",
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          }}
          onMouseOver={(e) => {
            e.target.style.transform = "scale(1.1)";
            e.target.style.boxShadow = "0 6px 20px rgba(133, 14, 53, 0.4)";
          }}
          onMouseOut={(e) => {
            e.target.style.transform = "scale(1)";
            e.target.style.boxShadow = "0 4px 16px rgba(133, 14, 53, 0.3)";
          }}
          aria-label="Open SocialNITT FAQ Chatbot"
        >
          ü§ñ
        </button>
      </div>

      {/* Chatbot Panel */}
      {open && (
        <div
          ref={chatbotRef}
          style={{
            position: "fixed",
            bottom: "100px",
            right: "32px",
            width: "380px",
            maxHeight: "500px",
            background: "#fff",
            borderRadius: "16px",
            boxShadow: "0 8px 32px rgba(0,0,0,0.12)",
            zIndex: 10000,
            display: "flex",
            flexDirection: "column",
            overflow: "hidden",
            border: "1px solid #e1e5e9"
          }}
        >
          {/* Header */}
          <div
            style={{
              background: "linear-gradient(135deg, #850E35, #a91142)",
              color: "#fff",
              padding: "16px",
              fontWeight: "600",
              fontSize: "16px",
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center"
            }}
          >
            <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
              <span style={{ fontSize: "20px" }}>üéì</span>
              SocialNITT FAQ Bot
            </div>
            <button
              onClick={() => setOpen(false)}
              style={{
                background: "none",
                border: "none",
                color: "#fff",
                fontSize: "20px",
                cursor: "pointer",
                padding: "4px",
                borderRadius: "4px",
                transition: "background 0.2s"
              }}
              onMouseOver={(e) => e.target.style.background = "rgba(255,255,255,0.1)"}
              onMouseOut={(e) => e.target.style.background = "none"}
              aria-label="Close"
            >
              √ó
            </button>
          </div>

          {/* Messages */}
          <div
            ref={panelRef}
            style={{
              flex: 1,
              padding: "16px",
              overflowY: "auto",
              background: "#f8f9fa",
              maxHeight: "300px"
            }}
          >
            {messages.map((msg, idx) => (
              <div
                key={idx}
                style={{
                  textAlign: msg.from === "user" ? "right" : "left",
                  margin: "12px 0"
                }}
              >
                <div
                  style={{
                    display: "inline-block",
                    background: msg.from === "user" 
                      ? "linear-gradient(135deg, #850E35, #a91142)" 
                      : "#fff",
                    color: msg.from === "user" ? "#fff" : "#333",
                    borderRadius: "12px",
                    padding: "12px 16px",
                    maxWidth: "85%",
                    wordBreak: "break-word",
                    boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                    border: msg.from === "bot" ? "1px solid #e1e5e9" : "none",
                    fontSize: "14px",
                    lineHeight: "1.4",
                    whiteSpace: "pre-line"
                  }}
                >
                  {msg.text}
                </div>
              </div>
            ))}
            
            {loading && (
              <div style={{ textAlign: "left", color: "#666", padding: "8px 0" }}>
                <div style={{
                  display: "inline-block",
                  background: "#fff",
                  padding: "12px 16px",
                  borderRadius: "12px",
                  boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                  border: "1px solid #e1e5e9"
                }}>
                  <span style={{ fontSize: "14px" }}>ü§ñ Thinking...</span>
                </div>
              </div>
            )}

            {/* Initial Quick Suggestions - only show when conversation starts */}
            {messages.length === 1 && !loading && (
              <div style={{ marginTop: "16px" }}>
                <div style={{ fontSize: "12px", color: "#666", marginBottom: "8px", fontWeight: "500" }}>
                  üí° Popular questions:
                </div>
                {quickSuggestions.map((suggestion, idx) => (
                  <button
                    key={idx}
                    onClick={() => handleSuggestionClick(suggestion)}
                    style={{
                      display: "block",
                      width: "100%",
                      textAlign: "left",
                      background: "#fff",
                      border: "1px solid #e1e5e9",
                      borderRadius: "8px",
                      padding: "8px 12px",
                      margin: "4px 0",
                      fontSize: "13px",
                      color: "#333",
                      cursor: "pointer",
                      transition: "all 0.2s ease"
                    }}
                    onMouseOver={(e) => {
                      e.target.style.background = "#f0f0f0";
                      e.target.style.borderColor = "#850E35";
                    }}
                    onMouseOut={(e) => {
                      e.target.style.background = "#fff";
                      e.target.style.borderColor = "#e1e5e9";
                    }}
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Quick FAQ Menu - Always Visible */}
          <div
            style={{
              padding: "12px 16px",
              background: "#fff",
              borderTop: "1px solid #e1e5e9",
              borderBottom: "1px solid #e1e5e9"
            }}
          >
            <div style={{ fontSize: "11px", color: "#666", marginBottom: "8px", textAlign: "center", fontWeight: "500" }}>
              üìã Quick FAQ Menu
            </div>
            {quickFAQMenu.map((row, rowIdx) => (
              <div
                key={rowIdx}
                style={{
                  display: "flex",
                  gap: "6px",
                  marginBottom: rowIdx < quickFAQMenu.length - 1 ? "6px" : "0"
                }}
              >
                {row.map((faqItem, itemIdx) => (
                  <button
                    key={itemIdx}
                    onClick={() => handleFAQClick(faqItem)}
                    style={{
                      flex: 1,
                      background: "#f8f9fa",
                      border: "1px solid #e1e5e9",
                      borderRadius: "6px",
                      padding: "8px 4px",
                      fontSize: "11px",
                      color: "#555",
                      cursor: "pointer",
                      transition: "all 0.2s ease",
                      textAlign: "center",
                      fontWeight: "500",
                      minHeight: "32px",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center"
                    }}
                    onMouseOver={(e) => {
                      e.target.style.background = "#850E35";
                      e.target.style.color = "#fff";
                      e.target.style.borderColor = "#850E35";
                      e.target.style.transform = "scale(1.02)";
                    }}
                    onMouseOut={(e) => {
                      e.target.style.background = "#f8f9fa";
                      e.target.style.color = "#555";
                      e.target.style.borderColor = "#e1e5e9";
                      e.target.style.transform = "scale(1)";
                    }}
                    title={faqItem.query}
                  >
                    {faqItem.text}
                  </button>
                ))}
              </div>
            ))}
          </div>

          {/* Input Section */}
          <div
            style={{
              display: "flex",
              background: "#fff",
              padding: "12px"
            }}
          >
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Ask me anything about SocialNITT..."
              style={{
                flex: 1,
                border: "1px solid #e1e5e9",
                borderRadius: "20px",
                padding: "10px 16px",
                outline: "none",
                fontSize: "14px",
                marginRight: "8px"
              }}
              disabled={loading}
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  handleSubmit(e);
                }
              }}
            />
            <button
              onClick={handleSubmit}
              style={{
                background: "linear-gradient(135deg, #850E35, #a91142)",
                color: "#fff",
                border: "none",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                fontSize: "16px",
                cursor: "pointer",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                transition: "transform 0.2s"
              }}
              disabled={loading}
              onMouseOver={(e) => e.target.style.transform = "scale(1.05)"}
              onMouseOut={(e) => e.target.style.transform = "scale(1)"}
            >
              ‚û§
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default SocialNITTChatbot;